name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"] # Or your default branch name

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    # Add this 'env' block to expose secrets to the build process
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect Package Manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Or your preferred Node.js version
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v4
        # Add this step if you need basePath and assetPrefix for a subdirectory deployment
        # with:
        #   static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      # Add this temporary step for debugging
      - name: Check Environment Variables
        run: |
          echo "Checking environment variables..."
          echo "Supabase URL is set: ${{ env.NEXT_PUBLIC_SUPABASE_URL != '' }}"
          echo "Supabase Anon Key is set: ${{ env.NEXT_PUBLIC_SUPABASE_ANON_KEY != '' }}"
          # Optionally print the actual values (be careful if logs are public)
          # echo "URL: ${{ env.NEXT_PUBLIC_SUPABASE_URL }}"
          # echo "Key: ${{ env.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
      # End of temporary step
      # The build step will now have access to the environment variables
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
        # The build script in package.json should be "next build && next export"
        # The output directory will be 'out'
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the 'out' directory generated by 'next export'
          path: "./out"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
